var AvlTree = require("@tyriar/avl-tree");
var roomTree = new AvlTree();
var tableTree = new AvlTree();
var userTreeWithSocketId = new AvlTree();
var userTreeWithId = new AvlTree();
var roomsDetails = [
    {
        "roomId":0,
        "roomName":"Çulsuzlar (0 Kp - 99 Kp)",
        "minKp":1,
        "maxKp":99,
        "tables":new AvlTree()
    },
    {
        "roomId":1,
        "roomName":"Yeniler (100 Kp)",
        "minKp":100,
        "maxKp":0,
        "tables":new AvlTree()
    },
    {
        "roomId":2,
        "roomName":"Öğrenenler (200 Kp)",
        "minKp":200,
        "maxKp":0,
        "tables":new AvlTree()
    },
    {
        "roomId":3,
        "roomName":"Tecrübeliler (300 Kp)",
        "minKp":300,
        "maxKp":0,
        "tables":new AvlTree()
    },
    {
        "roomId":4,
        "roomName":"Ustalar (400 Kp)",
        "minKp":400,
        "maxKp":0,
        "tables":new AvlTree()
    },
    {
        "roomId":5,
        "roomName":"Hocalar (500 Kp)",
        "minKp":500,
        "maxKp":0,
        "tables":new AvlTree()
    },
    {
        "roomId":6,
        "roomName":"Babalar (1000 Kp)",
        "minKp":1000,
        "maxKp":0,
        "tables":new AvlTree()
    }
    ,
    {
        "roomId":7,
        "roomName":"Ağa Babalar (3000 Kp)",
        "minKp":3000,
        "maxKp":0,
        "tables":new AvlTree()
    },
    {
        "roomId":8,
        "roomName":"Paşa Babalar (5000 Kp)",
        "minKp":5000,
        "maxKp":0,
        "tables":new AvlTree()
    }
];
var roomNode = function(){
	this.roomId = 0;
	this.roomName = "";
	this.minKp = 0;
	this.tables = "";
	this.getNonFull = function (table,kp) {
        if(table == undefined){
            if(this.tables._root != null){
                return this.getNonFull(this.tables._root, kp)
            }
            return undefined;
        }
        if(table.left != null){
            return this.getNonFull(table.left.left, kp)
        }
        if(!table.value.isFull & table.value.kp<=kp){
            return table.value;
        }
        else if(table.right != null){
            return this.getNonFull(table.right, kp)
        }
        return undefined;
    }
}
var tableNode = function(){
	this.tableId = 0;
	this.usersmd5 = ["",""];
	this.game = undefined;
	this.turn = -1;
	this.poolKp = 0;
	this.isFull = false;
	this.timeLeft = 0;
	this.kp = 0;
	this.started = false;
}
var squarNode = function(){
	this.x = 0;
	this.y = 0;
	this.rightLine = false;
	this.bottomLine = false;
	this.leftLine = false;
	this.topLine = false;
}
var gameNode = function(){
	this.width = 0;
	this.squars = new AvlTree();
	this.create = function(){
		for(var i=0; i< this.width; i++){
			for(var j=0; j< this.width; j++){
				
			}
		}
	}
}
for(var i=0;i<roomsDetails.length;i++){
    var newRoom = new roomNode();
    newRoom.roomId = roomsDetails[i].roomId;
    newRoom.roomName = roomsDetails[i].roomName;
    newRoom.minKp = roomsDetails[i].minKp;
    newRoom.maxKp = roomsDetails[i].maxKp;
    newRoom.tables = roomsDetails[i].tables;
    newRoom.waitingUsers = [];
    roomTree.insert(roomsDetails[i].roomId,newRoom)
}
roomTree.get(1).tables.insert(roomTree.get(1).tables.size()+1,new tableNode());
roomTree.get(1).tables.get(1).tableId = 1;
roomTree.get(1).tables.get(1).usersmd5[0] = "a46d9e645b9849ce046c5b67dc685914";
roomTree.get(1).tables.get(1).kp = 100;
roomTree.get(1).tables.get(1).poolKp = 100;
roomTree.get(1).tables.get(1).isFull = false;
module.exports = {
	"rooms":roomTree,
	"usersWithSocketId":userTreeWithSocketId,
	"usersWithId":userTreeWithId
};